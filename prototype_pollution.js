const express = require('express');
const bodyParser = require('body-parser');
const app = express();

app.use(bodyParser.json());

// Utility to detect unsafe keys
function isUnsafe(payload) {
    const forbiddenKeys = ['_proto_', 'constructor', 'prototype'];
    return Object.keys(payload).some(key => forbiddenKeys.includes(key));
}

// Vulnerable endpoint with detection
app.post('/pollute', (req, res) => {
    const payload = req.body;

    // Detection logic
    if (isUnsafe(payload)) {
        res.status(400).send('Unsafe input detected! Prototype pollution attempt blocked.');
        return;
    }

    // Vulnerable logic
    Object.assign(Object.prototype, payload);
    res.send('Prototype polluted successfully!');
});

// Endpoint to check pollution status
app.get('/check', (req, res) => {
    if ({}.polluted) {
        res.send('Prototype is polluted! Security issue detected.');
    } else {
        res.send('Prototype is safe.');
    }
});

// Start server
const PORT = 3000;
app.listen(PORT, () => console.log(`Prototype Pollution server running on port ${PORT}`));
