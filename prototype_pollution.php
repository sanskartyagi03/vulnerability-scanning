<?php
    include('../config.inc.php'); // Include configuration if required
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Prototype Pollution Vulnerability</title>
</head>
<body>
    <h1>Prototype Pollution Vulnerability</h1>
    <p>This page demonstrates a Prototype Pollution vulnerability and provides information on detection and remediation techniques.</p>

    <!-- Interaction with the Vulnerability -->
    <h2>Prototype Pollution Demonstration</h2>
    <form id="pollutionForm">
        <label for="pollutionPayload">Enter Payload (JSON):</label><br>
        <textarea id="pollutionPayload" name="pollutionPayload" rows="4" cols="50">{"polluted": true}</textarea><br><br>
        <button type="button" onclick="pollutePrototype()">Pollute Prototype</button>
    </form>
    <button type="button" onclick="checkPollution()">Check Prototype Pollution</button>
    <p id="pollutionResponse"></p>

    <!-- Detection Demonstration -->
    <h2>Prototype Pollution Detection</h2>
    <p>The system scans inputs for unsafe keys like <code>_proto_</code>, <code>constructor</code>, and <code>prototype</code>. Malicious payloads are blocked.</p>
    <form id="detectionForm">
        <label for="detectionPayload">Test Payload (JSON):</label><br>
        <textarea id="detectionPayload" name="detectionPayload" rows="4" cols="50">{"_proto_": {"polluted": true}}</textarea><br><br>
        <button type="button" onclick="testDetection()">Test Detection</button>
    </form>
    <p id="detectionResponse"></p>

    <!-- Remediation Techniques -->
    <h2>Remediation Techniques</h2>
    <p>To prevent prototype pollution vulnerabilities, follow these best practices:</p>
    <ul>
        <li><strong>Input Validation:</strong> Reject object keys such as <code>_proto_</code>, <code>constructor</code>, or <code>prototype</code>.</li>
        <li><strong>Use Secure Libraries:</strong> Libraries like <code>lodash</code> can handle deep merges and object assignments securely.</li>
        <li><strong>Freeze Prototypes:</strong> Use <code>Object.freeze(Object.prototype)</code> to prevent runtime modifications.</li>
    </ul>

    <!-- Script Section -->
    <script>
        const baseURL = 'http://localhost:3000'; // Update if the server runs on a different hostname or port

        // Function to pollute the prototype
        async function pollutePrototype() {
            const payload = document.getElementById('pollutionPayload').value;
            try {
                const response = await fetch(${baseURL}/pollute, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: payload
                });
                document.getElementById('pollutionResponse').innerText = await response.text();
            } catch (error) {
                document.getElementById('pollutionResponse').innerText = 'Error connecting to the server.';
            }
        }

        // Function to check prototype pollution
        async function checkPollution() {
            try {
                const response = await fetch(${baseURL}/check);
                document.getElementById('pollutionResponse').innerText = await response.text();
            } catch (error) {
                document.getElementById('pollutionResponse').innerText = 'Error connecting to the server.';
            }
        }

        // Function to test detection
        async function testDetection() {
            const payload = document.getElementById('detectionPayload').value;
            try {
                const response = await fetch(${baseURL}/pollute, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: payload
                });
                document.getElementById('detectionResponse').innerText = await response.text();
            } catch (error) {
                document.getElementById('detectionResponse').innerText = 'Error connecting to the server.';
            }
        }
    </script>
</body>
</html>
